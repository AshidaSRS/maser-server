// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package models

/**
usage:
val obj = scalaxb.fromXML[models.Foo](node)
val document = scalaxb.toXML[models.Foo](obj, "foo", models.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Models_UserFormat: scalaxb.XMLFormat[models.User] = new DefaultModels_UserFormat {}
  implicit lazy val Models_Entry2Format: scalaxb.XMLFormat[models.Entry2] = new DefaultModels_Entry2Format {}
  implicit lazy val Models_EntryFormat: scalaxb.XMLFormat[models.Entry] = new DefaultModels_EntryFormat {}
  implicit lazy val Models_AnimeFormat: scalaxb.XMLFormat[models.Anime] = new DefaultModels_AnimeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{DataRecord, Helper, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("user"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[models.User](elem)))
      case (Some("entry"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[models.Entry2](elem)))
      case (Some("entry"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[models.Entry2](elem)))
      case (Some("anime"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[models.Anime](elem)))

      case _ => None
    }
  }

  trait DefaultModels_UserFormat extends scalaxb.ElemNameParser[models.User] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.User] =
      phrase((scalaxb.ElemName(None, "id")) ~ 
      (scalaxb.ElemName(None, "username")) ^^
      { case p1 ~ p2 =>
      models.User(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.User, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.id, None, Some("id"), __scope, false),
        scalaxb.toXML[String](__obj.username, None, Some("username"), __scope, false))

  }

  trait DefaultModels_Entry2Format extends scalaxb.ElemNameParser[models.Entry2] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.Entry2] =
      phrase((scalaxb.ElemName(None, "episode")) ~ 
      (scalaxb.ElemName(None, "status")) ~ 
      (scalaxb.ElemName(None, "score")) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (any(_ => true)) ~ 
      (scalaxb.ElemName(None, "tags")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      models.Entry2(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p13, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p14, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.Entry2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.episode, None, Some("episode"), __scope, false),
        scalaxb.toXML[Int](__obj.status, None, Some("status"), __scope, false),
        scalaxb.toXML[Int](__obj.score, None, Some("score"), __scope, false),
        (Some(__obj.storage_type) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.storage_value) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.times_rewatched) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.rewatch_value) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.date_start) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.date_finish) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.priority) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.enable_discussion) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.enable_rewatching) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.comments) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        scalaxb.toXML[String](__obj.tags, None, Some("tags"), __scope, false))

  }

  trait DefaultModels_EntryFormat extends scalaxb.ElemNameParser[models.Entry] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.Entry] =
      phrase((scalaxb.ElemName(None, "id")) ~ 
      (scalaxb.ElemName(None, "title")) ~ 
      (scalaxb.ElemName(None, "english")) ~ 
      (scalaxb.ElemName(None, "synonyms")) ~ 
      (scalaxb.ElemName(None, "episodes")) ~ 
      (scalaxb.ElemName(None, "type")) ~ 
      (scalaxb.ElemName(None, "status")) ~ 
      (scalaxb.ElemName(None, "start_date")) ~ 
      (scalaxb.ElemName(None, "end_date")) ~ 
      (scalaxb.ElemName(None, "synopsis")) ~ 
      (scalaxb.ElemName(None, "image")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      models.Entry(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p11, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.Entry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.id, None, Some("id"), __scope, false),
        scalaxb.toXML[String](__obj.title, None, Some("title"), __scope, false),
        scalaxb.toXML[String](__obj.english, None, Some("english"), __scope, false),
        scalaxb.toXML[String](__obj.synonyms, None, Some("synonyms"), __scope, false),
        scalaxb.toXML[Int](__obj.episodes, None, Some("episodes"), __scope, false),
        scalaxb.toXML[String](__obj.typeValue, None, Some("type"), __scope, false),
        scalaxb.toXML[String](__obj.status, None, Some("status"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.start_date, None, Some("start_date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.end_date, None, Some("end_date"), __scope, false),
        scalaxb.toXML[String](__obj.synopsis, None, Some("synopsis"), __scope, false),
        scalaxb.toXML[String](__obj.image, None, Some("image"), __scope, false))

  }

  trait DefaultModels_AnimeFormat extends scalaxb.ElemNameParser[models.Anime] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[models.Anime] =
      phrase((scalaxb.ElemName(None, "entry")) ^^
      { case p1 =>
      models.Anime(scalaxb.fromXML[models.Entry](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: models.Anime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[models.Entry](__obj.entry, None, Some("entry"), __scope, false))

  }


}

